<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[rafael campos]]></title>
    <link href="http://www.campos.cc/atom.xml" rel="self"/>
    <link href="http://www.campos.cc/"/>
    <updated>2017-02-12T10:17:32+00:00</updated>
    <id>http://www.campos.cc/</id>
    <author>
        <name><![CDATA[Rafael Campos]]></name>
        
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Level Set Morphing: a few results]]></title>
        <link href="http://www.campos.cc/post/2016/06/07/level-set-morphing-a-few-results/"/>
        <updated>2016-06-07T14:07:46+01:00</updated>
        <id>http://www.campos.cc/post/2016/06/07/level-set-morphing-a-few-results</id>
        <content type="html"><![CDATA[<p><a href="http://www.campos.cc/projects/morph/"><img src="http://www.campos.cc/images/morph/morph_header.png" title="Head to Stormtrooper" alt="Existing Morphing Technique(left) compared to ours(right)" style="width:100.0%" /></a></p>
<p>While the project is still ongoing, I made a project page and uploaded a few preliminary results that showcase what our algorithm can do.</p>
<p>In the image above, the existing level-set morphing technique, on the left, is compared to ours, on the right. The link to this example is below:</p>
<p><a href="https://vimeo.com/150960123">Head to Stormtrooper Morph - Vimeo</a></p>
<p><a href="http://www.campos.cc/projects/morph/">Project Page</a></p>
<div id="refs" class="references">

</div>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Ray Tracer Project]]></title>
        <link href="http://www.campos.cc/post/2016/06/07/ray-tracer-project/"/>
        <updated>2016-06-07T14:02:28+01:00</updated>
        <id>http://www.campos.cc/post/2016/06/07/ray-tracer-project</id>
        <content type="html"><![CDATA[<figure>
<img src="http://www.campos.cc/images/nikita/nikita_header.png" title="Bunny on Plane" alt="Low-poly Stanford Bunny (1k triangles), Hall Refraction model" /><figcaption>Low-poly Stanford Bunny (1k triangles), Hall Refraction model</figcaption>
</figure>
<p>I’ve created a project page for the ray tracer I’ve been working on, as well as made the source code available on Github.</p>
<ol type="1">
<li><a href="http://www.campos.cc/projects/nikita-render/">Project Page</a></li>
<li><a href="https://github.com/jehutymax/nikita-render">Source Code</a></li>
</ol>
<div id="refs" class="references">

</div>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[The Software for a Wedding]]></title>
        <link href="http://www.campos.cc/post/2016/06/02/the-software-for-a-wedding/"/>
        <updated>2016-06-02T16:29:55+01:00</updated>
        <id>http://www.campos.cc/post/2016/06/02/the-software-for-a-wedding</id>
        <content type="html"><![CDATA[<p>Elisabeth and I are getting married in a few weeks, which means we’ve been in <em>wedding-planning mode</em> for the past year or so. And while planning required the typical steps of finding a suitable venue and selecting a caterer and so on, we decided early on to rely enough on a wedding website, such that we could get away with (aka, the requirements):</p>
<ul>
<li><p>Instead of sending out one <em>Save the Date</em> card and one <em>Invitation</em> in the mail to each guest, we would send out a single invitation with the url for the website;</p></li>
<li><p>Manage RSVPs online instead of by mail;</p></li>
<li><p>Eliminate the need to print a Wedding Program by having one online;</p></li>
<li><p>Only have an online registry;</p></li>
<li><p>Concentrate all guest-facing wedding-related information in one place;</p></li>
</ul>
<p>Except for the registry - we used <a href="https://www.zola.com/invite/rafaelcdn">Zola</a><a href="#fn1" class="footnoteRef" id="fnref1"><sup>1</sup></a>-, I decided to code most things on my own.</p>
<p><a href="http://www.ElisabethAndRafael.com"><img src="http://www.campos.cc/images/post2/Elisabeth_Rafael.jpg" style="width:77.0%" /></a></p>
<p>The end result is here: <a href="http://www.ElisabethAndRafael.com">www.ElisabethAndRafael.com</a>;</p>
<!--more-->
<h3 id="the-website">The website</h3>
<p>I decided to use Python to develop the website, and between Flask and Django, the latter seemed to be better suited. I picked up a copy of <a href="http://amzn.to/1TZs9D4">Two Scoops of Django</a>, and went to work.</p>
<p>The book has a Django cookie-cutter project on <a href="https://github.com/pydanny/cookiecutter-django">Github</a> that makes it incredibly quick to kickstart a project.</p>
<p>Then, with a decent Bootstrap theme in hand, it really becomes a matter of editing the HTML and CSS (I didn’t use a preprocessor for this project) until it looks good.</p>
<p>A good portion of the website is made up of static content, with tons of images and a little JavaScript here and there for <em>Contact Us</em> functionality, loading up the external Zola widget, and other little gimmicks, like a countdown to the day and Bootstrap Alerts.</p>
<p>For the dynamic content, the website was setup to use <strong>PostgreSQL</strong>. Django’s Models abstraction made it fun to create the queries required for the Views.</p>
<h4 id="email-functionality">Email functionality</h4>
<p>For all things email, I went with <strong>Mailgun</strong>. They have a very good free plan for small scale applications, and the API was very easy to use in Python.</p>
<p>A few days ago we sent out a <em>marketing-style</em> email update to the guests who had RSVP’d.</p>
<p>The email assets (HTML, images) were uploaded to an Amazon S3 bucket, and made public. Then, the script was simple:</p>
Then the script was as simple as:
<div>
<script src='https://gist.github.com/752665d992e7acab2f343142191f651d.js'></script>
<noscript>
<pre><code>import string
import requests

html = &#39;https://s3.amazonaws.com/.../email.htm&#39;
content = requests.get(html)

DJANGO_MAILGUN_SERVER_NAME = &#39;&#39;
DJANGO_MAILGUN_API_KEY = &#39;&#39;

recipient_list = [&#39;email@one.com&#39;, &#39;email@two.com&#39;]

for email in recipient_list:
    requests.post(
        DJANGO_MAILGUN_SERVER_NAME + &quot;/messages&quot;,
        auth=(&quot;api&quot;, DJANGO_MAILGUN_API_KEY),
        data={&quot;from&quot;: &quot;Us &lt;us@email.com&gt;&quot;,
              &quot;to&quot;: email,
              &quot;o:campaign&quot;: &quot;&quot;, # optional, but it was cool (and creepy) to track opens and clicks.
              &quot;subject&quot;: &quot;Your subject&quot;,
              &quot;text&quot;: &#39;Your alt text for non-html clients&#39;,
              &quot;html&quot;: content.text})</code></pre>
</noscript>
</div>
<p>The actual script was a bit different: the email had links that I wanted to personalize per recipient, so there was a <em>string.replace()</em> involved, but the gist is the same.</p>
<h4 id="internationalization">Internationalization</h4>
<p>I had family and friends in Brazil, some of which wouldn’t be able to make it to the wedding, but in an effort to be inclusive, I thought it’d be nice to have all the content available in Portuguese as well.</p>
<p>Django’s support for i18n internationalization made it less complicated (if not less annoying) to make the website available in both languages.</p>
<h3 id="rsvp">RSVP</h3>
<p>Allowing people to RSVP online was the most elaborate feature of the website. Guests were asked to enter their email and a 4-digit code they had received with the invitation. <img src="http://www.campos.cc/images/post2/rsvp.png" align="center," style="width:40.0%" /></p>
<p>The first time they logged-in, the email would be linked to the wedding code, and the same email would have to be used if they wanted to change their response.</p>
<p>The 4-digit codes were generated taking the SHA-1 hash of each guest row (name, address, and so on, saved in a spreadsheet and exported as CSV), transforming it to URL-friendly base64 and taking the first 4 digits. Limiting it to 4 digits made collisions very likely, but I was more concerned with ease-of-use, and the number of guests was small enough that I was able to get away with running a validation script to make sure all codes were unique.</p>
<div>
<script src='https://gist.github.com/2376aea7b412924822e3fb9725def4b3.js'></script>
<noscript>
<pre><code>import csv
import base64
import hashlib

f = open(&#39;guests.csv&#39;, &quot;r&quot;, encoding=&#39;utf-8&#39;, errors=&#39;ignore&#39;)
csv_f = csv.reader(f)
for row in csv_f:
    s = &#39;&#39;
    for element in row:
        s += element
coded_s = s.encode(encoding=&#39;utf-8&#39;)
mrHash = hashlib.sha1(coded_s)
code = base64.urlsafe_b64encode(mrHash.digest()[0:3])
final_code = code.decode(&#39;utf-8&#39;)
final_code = final_code.replace(&#39;_&#39;, &#39;x&#39;)
final_code = final_code.replace(&#39;-&#39;, &#39;z&#39;)
print(final_code.upper())
</code></pre>
</noscript>
</div>
<h3 id="deployment">Deployment</h3>
<p>The site was deployed to <strong>Heroku</strong>, using its <a href="https://github.com/heroku/heroku-buildpack-python">Python Buildpack</a>. All static assets were uploaded to <strong>Amazon S3</strong> as part of the deployment process, with the paths updated on the fly. <strong>Cloudflare</strong>’s CDN was thrown in the mix as well.</p>
<p>Unfortunately, Heroku’s free tier didn’t cut it: the fact that the server process had to be restarted when someone visited after some inactivity period, made the site very, very slow. So I had to upgrade to the <em>Hobby</em> tier at $7/month.</p>
<div id="refs" class="references">

</div>
<section class="footnotes">
<hr />
<ol>
<li id="fn1"><p>contains affiliate link, a everyone gets $50 kind of thing.<a href="#fnref1">↩</a></p></li>
</ol>
</section>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Using Intel Performance Counter Monitor on Mac OS X]]></title>
        <link href="http://www.campos.cc/post/2014/03/15/using-intel-performance-monitor-on-mac-os-x/"/>
        <updated>2014-03-15T15:38:00+00:00</updated>
        <id>http://www.campos.cc/post/2014/03/15/using-intel-performance-monitor-on-mac-os-x</id>
        <content type="html"><![CDATA[<h4 id="what-im-doing">What I’m doing</h4>
<p>I needed to profile a C++ method for a graduate course I’m taking. More specifically, I wanted to be able to see memory access patterns and how the hit ratios for cache memory were affected by different coding strategies.</p>
<p>The alternative I chose was Intel’s Performance Counter Monitor (PCM), documented and freely available for download at <a href="http://www.intel.com/software/pcm">Intel’s website</a>.</p>
<p>Although not difficult, using it wasn’t as straightforward as I would have liked, so here’s a straight to the point setup tutorial for Mac OS X.</p>
<!--more-->
<h4 id="what-youll-need">What you’ll need</h4>
<ol type="1">
<li><p>Download Intel PCM <a href="http://www.intel.com/software/pcm">here</a> and extract it wherever you like to keep your libraries and packages. I’ll refer to this directory as <em>$(PCM_ROOT)</em>.</p></li>
<li><p>XCode (I’m using version 5, but it should work just as well with previous versions - PCM requires at least XCode 4.2; gcc and make should be available as well).</p></li>
<li><p>A C++ application you can’t wait to profile! #### Step 1: Install PCM</p></li>
</ol>
<p>To use PCM, its drivers must be built and properly installed. We’re going to opt for the Automatic install, since we don’t need to place the generated files anywhere specific. For this, administrator privilege, (<code>sudo</code>), will be needed.</p>
<p>Load up <strong>Terminal</strong> and <code>cd</code> your way into <em>$(PCM_ROOT)</em>. Now it’s basically the specific instructions that ship with PCM, namely:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>$ cd MacMSRDriver
</span><span class='line'>$ make install</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>This is what’s happening:</p>
<p><code>kextload.sh</code> will load the driver, <code>libPcmMsr.dylib</code> will be placed in <code>/usr/lib</code> and the header files <code>MSRAccessor.h</code> and <code>MSRKernel.h</code> will be copied to <code>/usr/include</code>.</p>
<p>Then, assuming everything worked out ok:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>$ cd ..
</span><span class='line'>$ make</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
This builds the utility applications and the object files and should give you the executable. To test it, for example:
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class=''><span class='line'>$ ./pcm.x 1</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>If this works, Intel PCM is properly installed.</p>
<h4 id="step-2-using-pcms-cpu-counters-in-your-code">Step 2: Using PCM’s CPU Counters in your code</h4>
<p>For me, this was the tricky part. Figuring out exactly which files to link against was basically trial and error, hence this post.</p>
<p>In your <code>.cpp</code> file, you just need to include the proper header. To do this, add the <em>$(PCM_ROOT)</em> to the <code>User Header Search Paths</code> property under your project’s <em>Build Settings</em> on XCode. With this in place, you can simply add to your program file:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
</pre>
</td>
<td class="code">
<pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cpucounters.h&gt;</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>PCM methods are not encapsulated in any namespace, so you can just go ahead and use it like the example below:</p>
<div class="bogus-wrapper">
<notextile>
<figure class="code">
<figcaption>
<span></span>
</figcaption>
<div class="highlight">
<table>
<tr>
<td class="gutter">
<pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre>
</td>
<td class="code">
<pre><code class='cpp'><span class='line'><span class="n">PCM</span> <span class="o">*</span><span class="n">m</span> <span class="o">=</span> <span class="n">PCM</span><span class="o">::</span><span class="n">getInstance</span><span class="p">();</span>
</span><span class='line'><span class="n">m</span><span class="o">-&gt;</span><span class="n">program</span> <span class="p">(</span><span class="n">PCM</span><span class="o">::</span><span class="n">DEFAULT_EVENTS</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="o">-&gt;</span><span class="n">program</span><span class="p">()</span> <span class="o">!=</span> <span class="n">PCM</span><span class="o">::</span><span class="n">Success</span><span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">SystemCounterState</span> <span class="n">before_sstate</span> <span class="o">=</span> <span class="n">getSystemCounterState</span><span class="p">();</span>
</span><span class='line'><span class="c1">// method call to be profiled goes here!</span>
</span><span class='line'><span class="n">SystemCounterState</span> <span class="n">after_sstate</span> <span class="o">=</span> <span class="n">getSystemCounterState</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Instructions per Clock: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">getIPC</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>    <span class="s">&quot;</span><span class="se">\n</span><span class="s">L3 cache hit ratio: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">getL3CacheHitRatio</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>    <span class="s">&quot;</span><span class="se">\n</span><span class="s">L2 cache hit ratio: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">getL2CacheHitRatio</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>    <span class="s">&quot;</span><span class="se">\n</span><span class="s">Wasted cycles caused by L3 misses: &quot;</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>    <span class="n">getCyclesLostDueL3CacheMisses</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>    <span class="s">&quot;</span><span class="se">\n</span><span class="s">Bytes read from DRAM: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">getBytesReadFromMC</span><span class="p">(</span><span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">))</span> <span class="o">&lt;&lt;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">m</span><span class="o">-&gt;</span><span class="n">cleanup</span><span class="p">();</span>
</span></code></pre>
</td>
</tr>
</table>
</div>
</figure>
</notextile>
</div>
<p>Building your program now will result in linker errors. There are a few files that your application has to link against:</p>
<ul>
<li>libPcmMsr.dylib</li>
<li>cpucounters.o</li>
<li>client_bw.o</li>
<li>pci.o</li>
<li>msr.o</li>
</ul>
<p><code>libPcmMsr.dylib</code> is under <code>/usr/lib</code>, while the other files are under <em>$(PCM_ROOT)</em>. Back to the <em>Build Settings</em> on XCode, search for the <code>Other Linker Flags</code> property and add the full path for all these files. Dragging them from <em>Finder</em> works as expected. The resulting list should be similar to the following. Note that the first file, <code>libboost...</code> is unrelated and specific to my project.</p>
<figure>
<img src="http://www.campos.cc/images/post1/other_linker_flags.jpg" title="Other Linker Flags Screenshot" alt="Other Linker Flags screenshot" /><figcaption>Other Linker Flags screenshot</figcaption>
</figure>
<p>Your application should build successfully at this point.</p>
<div id="refs" class="references">

</div>
]]></content>
    </entry>
    
</feed>
